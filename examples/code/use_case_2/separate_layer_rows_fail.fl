-- Use Case 2: Machine Learning Pipelines
-- We support some basic operations on data sets
-- For the running example we assume data sets are 2D matrices

-- Perform operations that depend on the number of rows
sample :: rows :: { d:DataSet | true } -> { n:Int | (n >= 0) && (n <= (n_rows(d))) } -> { d2:DataSet | (n_rows(d2) == n) }
sample :: cols :: { d:DataSet | true } -> { n:Int | true } -> { d2:DataSet | (n_cols(d2) == n_cols(d)) }
sample :: rowcols :: { d:DataSet | true } -> { n:Int | true } -> { d2:DataSet | true }

create_dataset :: rows :: { c:Int | true } -> { r:Int | (r >= 0) } -> { d:DataSet | (n_rows(d) == r) }
create_dataset :: cols :: { c:Int | (c >=0) } -> { r:Int | true } -> { d:DataSet | (n_cols(d) == c) }
create_dataset :: rowcols :: { c:Int | true } -> { r:Int | true } -> { d:DataSet | true }

-- Scenario 1: Operations with only rows

dataset :: rows :: { d:DataSet | true }
dataset :: cols :: { d:DataSet | true }
dataset :: rowcols :: { d:DataSet | true }
let dataset := create_dataset(10,50) in {

    -- This fails because we do not have enough rows
    s :: rows :: { d:DataSet | true }
    s :: cols :: { d:DataSet | true }
    s :: rowcols :: { d:DataSet | true }
    let s := sample(dataset, 100) in {
        s
    }

}