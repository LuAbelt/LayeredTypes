-- Use Case 2: Machine Learning Pipelines
-- We support some basic operations on data sets
-- For the running example we assume data sets are 2D matrices

-- Add rows or columns to a data set
add_cols :: liquid :: { d:DataSet | true } -> {n:Int | n>0} -> { d2:DataSet | (n_cols(d2) == (n_cols(d) + n)) && (n_rows(d2) == (n_rows(d)) ) }

-- Perform operations that depend on the number of columns
reduce_cols :: liquid :: { d:DataSet | true } -> { c:Int | (c >= 0) && (c < (n_cols(d))) } -> { d2:DataSet | (n_cols(d2) == c) && (n_rows(d2) == (n_rows(d)) ) }

create_dataset :: liquid :: { c:Int | (c >= 0) } -> { r:Int | (r >= 0) } -> { d:DataSet | (n_cols(d) == c) && (n_rows(d) == r)}

-- Scenario 2: Operations with only columns

dataset :: liquid :: { d:DataSet | true }
let dataset := create_dataset(10,50) in {

    big_dataset :: liquid :: { d:DataSet | true }
    let big_dataset := add_cols(dataset, 100) in {
        c :: liquid :: { c:DataSet | true }
        let c := reduce_cols(big_dataset, 20) in {
            c
        }
    }
}
