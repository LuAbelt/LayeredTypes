-- Use Case 2: Machine Learning Pipelines
-- We support some basic operations on data sets
-- For the running example we assume data sets are 2D matrices

-- Operations that depend on both the number of rows and columns
-- When training a model, we should have at least 10 rows per column
train :: rows :: { d:DataSet | true } -> { m:Model | true }
train :: cols :: { d:DataSet | true } -> { m:Model | true }
train :: rowcols :: { d:DataSet | (n_rows(d) >= 10 * (n_cols(d))) } -> { m:Model | true }

create_dataset :: rows :: { c:Int | true } -> { r:Int | (r >= 0) } -> { d:DataSet | (n_rows(d) == r) }
create_dataset :: cols :: { c:Int | (c >=0) } -> { r:Int | true } -> { d:DataSet | (n_cols(d) == c) }
create_dataset :: rowcols :: { c:Int | true } -> { r:Int | true } -> { d:DataSet | true }

-- Scenario 3: Operations with rows and columns
-- We show that calling train on this data set fails because we do not have enough rows

dataset :: rows :: { d:DataSet | true }
dataset :: cols :: { d:DataSet | true }
dataset :: rowcols :: { d:DataSet | true }

let dataset := create_dataset(10,50) in {
    -- This fails because we do not have enough rows
    train(dataset)
}

