-- Use Case 2: Machine Learning Pipelines
-- We support some basic operations on data sets
-- For the running example we assume data sets are 2D matrices

-- Add rows or columns to a data set
add_rows :: liquid :: { d:DataSet | n_cols(d) > 0 } -> {n:Int | n>0} -> { d2:DataSet | (n_rows(d2) == (n_rows(d) + n)) && (n_cols(d2) == n_cols(d)) }
reduce_cols :: liquid :: { d:DataSet | true } -> { c:Int | (c >= 0) && (c < (n_cols(d))) } -> { d2:DataSet | (n_cols(d2) == c) && (n_rows(d2) == n_rows(d)) }

-- Operations that depend on both the number of rows and columns
-- When training a model, we should have at least 10 rows per column
train :: liquid :: { d:DataSet | (n_rows(d) >= 10 * (n_cols(d))) } -> { m:Model | true }

create_dataset :: liquid :: { c:Int | (c >= 0) } -> { r:Int | (r >= 0) } -> { d:DataSet | (n_cols(d) == c) && (n_rows(d) == r) }

-- Scenario 3: Operations with rows and columns
-- We show that calling train on this data set fails because we do not have enough rows

empty_dataset :: liquid :: { d:DataSet | n_rows(d) == 0 }
let empty_dataset := create_dataset(10,0) in {
    dataset :: liquid :: { d:DataSet | n_rows(d) > 0 }
    let dataset := add_rows(empty_dataset, 50) in {

       single_column :: liquid :: { d:DataSet | true }
       let single_column := reduce_cols(dataset, 1) in {
           train(single_column)
       }

       small_dataset :: liquid :: { d:DataSet | true }
       let small_dataset := reduce_cols(dataset, 5) in {
           train(small_dataset)
       }
    }
}

