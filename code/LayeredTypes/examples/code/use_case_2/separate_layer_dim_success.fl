-- Use Case 2: Machine Learning Pipelines
-- We support some basic operations on data sets
-- For the running example we assume data sets are 2D matrices
-- Add rows or columns to a data set
add_cols :: rows :: { d:DataSet | true } -> {n:Int | n>0} -> { d2:DataSet | (n_rows(d2) == n_rows(d)) }
add_cols :: cols :: { d:DataSet | true } -> {n:Int | n>0} -> { d2:DataSet | (n_cols(d2) == (n_cols(d) + n)) }
add_cols :: rowcols :: { d:DataSet | true } -> {n:Int | n>0} -> { d2:DataSet | true }

add_rows :: rows :: { d:DataSet | true } -> {n:Int | n>0} -> { d2:DataSet | (n_rows(d2) == (n_rows(d) + n)) }
add_rows :: cols :: { d:DataSet | n_cols(d)>0 } -> {n:Int | true} -> { d2:DataSet | (n_cols(d2) == n_cols(d)) }
add_rows :: rowcols :: { d:DataSet | true } -> {n:Int | n>0} -> { d2:DataSet | true }

-- Perform operations that depend on the number of columns
reduce_cols :: rows :: { d:DataSet | true } -> { c:Int | true } -> { d2:DataSet | (n_rows(d2) == n_rows(d)) }
reduce_cols :: cols :: { d:DataSet | true } -> { c:Int | (c >= 0) && (c < (n_cols(d))) } -> { d2:DataSet | (n_cols(d2) == c) }
reduce_cols :: rowcols :: { d:DataSet | true } -> { c:Int | true } -> { d2:DataSet | true }

-- Operations that depend on both the number of rows and columns
-- When training a model, we should have at least 10 rows per column
train :: rows :: { d:DataSet | true } -> { m:Model | true }
train :: cols :: { d:DataSet | true } -> { m:Model | true }
train :: rowcols :: { d:DataSet | (n_rows(d) >= 10 * (n_cols(d))) } -> { m:Model | true }

create_dataset :: rows :: { c:Int | true } -> { r:Int | (r >= 0) } -> { d:DataSet | (n_rows(d) == r) }
create_dataset :: cols :: { c:Int | (c >=0) } -> { r:Int | true } -> { d:DataSet | (n_cols(d) == c) }
create_dataset :: rowcols :: { c:Int | true } -> { r:Int | true } -> { d:DataSet | true }

-- Scenario 3: Operations with rows and columns
-- We show that calling train on this data set fails because we do not have enough rows

dataset :: rows :: { d:DataSet | true }
dataset :: cols :: { d:DataSet | true }
dataset :: rowcols :: { d:DataSet | true }
let dataset := create_dataset(10,50) in {

    small_dataset :: rows :: { d:DataSet | true }
    small_dataset :: cols :: { d:DataSet | true }
    small_dataset :: rowcols :: { d:DataSet | true }
    let small_dataset := reduce_cols(dataset, 3) in {
        train(small_dataset)
    }

    big_dataset :: rows :: { d:DataSet | true }
    big_dataset :: cols :: { d:DataSet | true }
    big_dataset :: rowcols :: { d:DataSet | true }
    let big_dataset := add_rows(dataset, 50) in {
        train(big_dataset)
    }
}

