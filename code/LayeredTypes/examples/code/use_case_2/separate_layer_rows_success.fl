-- Use Case 2: Machine Learning Pipelines
-- We support some basic operations on data sets
-- For the running example we assume data sets are 2D matrices

-- Add rows or columns to a data set
add_rows :: rows :: { d:DataSet | true } -> {n:Int | n>0} -> { d2:DataSet | (n_rows(d2) == (n_rows(d) + n)) }
add_rows :: cols :: { d:DataSet | n_cols(d)>0 } -> {n:Int | true} -> { d2:DataSet | (n_cols(d2) == n_cols(d)) }
add_rows :: rowcols :: { d:DataSet | true } -> {n:Int | n>0} -> { d2:DataSet | true }

-- Perform operations that depend on the number of rows
sample :: rows :: { d:DataSet | true } -> { n:Int | (n >= 0) && (n <= (n_rows(d))) } -> { d2:DataSet | (n_rows(d2) == n) }
sample :: cols :: { d:DataSet | true } -> { n:Int | true } -> { d2:DataSet | (n_cols(d2) == n_cols(d)) }
sample :: rowcols :: { d:DataSet | true } -> { n:Int | true } -> { d2:DataSet | true }

create_dataset :: rows :: { c:Int | true } -> { r:Int | (r >= 0) } -> { d:DataSet | (n_rows(d) == r) }
create_dataset :: cols :: { c:Int | (c >=0) } -> { r:Int | true } -> { d:DataSet | (n_cols(d) == c) }
create_dataset :: rowcols :: { c:Int | true } -> { r:Int | true } -> { d:DataSet | true }

-- Scenario 1: Operations with only rows

dataset :: rows :: {d:DataSet | true }
dataset :: cols :: {d:DataSet | true }
dataset :: rowcols :: {d:DataSet | true }
let dataset := create_dataset(10,50) in {

        big_dataset :: rows :: { d:DataSet | true }
        big_dataset :: cols :: { d:DataSet | true }
        big_dataset :: rowcols :: { d:DataSet | true }
        let big_dataset := add_rows(dataset, 100) in {
            sample(big_dataset, 100)
        }

        small_sample :: rows :: { d:DataSet | true }
        small_sample :: cols :: { d:DataSet | true }
        small_sample :: rowcols :: { d:DataSet | true }
        let small_sample := sample(dataset, 10) in {
            small_sample
        }
}