-- Use Case 2: Machine Learning Pipelines
-- We support some basic operations on data sets
-- For the running example we assume data sets are 2D matrices

-- Add rows or columns to a data set
add_rows :: liquid :: { d:DataSet | n_cols(d) > 0 } -> {n:Int | n>0} -> { d2:DataSet | (n_rows(d2) == (n_rows(d) + n)) && (n_cols(d2) == n_cols(d)) }

-- Perform operations that depend on the number of rows
sample :: liquid :: { d:DataSet | true } -> { n:Int | (n >= 0) && (n <= (n_rows(d))) } -> { d2:DataSet | (n_rows(d2) == n) && (n_cols(d2) == n_cols(d)) }

create_dataset :: liquid :: { c:Int | (c >= 0) } -> { r:Int | (r >= 0) } -> { d:DataSet | (n_cols(d) == c) && (n_rows(d) == r) }

-- Scenario 1: Operations with only rows

empty_dataset :: liquid :: { d:DataSet | true }
let empty_dataset := create_dataset(10,0) in {

    dataset :: liquid :: { d:DataSet | true }
    let dataset := add_rows(empty_dataset, 50) in {

        -- This fails because we do not have enough rows
        s :: liquid :: { d:DataSet | true }
        let s := sample(dataset, 100) in {
            s
        }

    }
}