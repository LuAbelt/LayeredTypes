-- Use Case 2: Machine Learning Pipelines
-- We support some basic operations on data sets
-- For the running example we assume data sets are 2D matrices

-- Get Dimensions of a Data Set
n_rows :: liquid :: { d:DataSet | true } -> { r:Int | (r >= 0) && (r == (n_rows(d)) }
n_cols :: liquid :: { d:DataSet | true } -> { c:Int | (c >= 0) && (c == (n_cols(d)) }

-- Add rows or columns to a data set
add_cols :: liquid :: { d:DataSet | true } -> {n:Int | n>0} -> { d2:DataSet | (n_cols(d2) == (n_cols(d) + n)) }
add_rows :: liquid :: { d:DataSet | n_cols(d) > 0 } -> {n:Int | n>0} -> { d2:DataSet | (n_rows(d2) == (n_rows(d) + n)) }

get_row :: liquid :: { d:DataSet | true } -> { r:Int | (r >= 0) && (r < (n_rows(d))) } -> { d2:DataSet | (n_cols(d2) == (n_cols(d)) && (n_rows(d2)==1) ) }

-- Perform operations that depend on the number of columns
extract_col :: liquid :: { d:DataSet | true } -> { c:Int | (c >= 0) && (c < (n_cols(d))) } -> { d2:DataSet | (n_cols(d2) == 1) }
reduce_cols :: liquid :: { d:DataSet | true } -> { c:Int | (c >= 0) && (c < (n_cols(d))) } -> { d2:DataSet | (n_cols(d2) == c) }

-- Perform operations that depend on the number of rows
sample :: liquid :: { d:DataSet | true } -> { n:Int | (n >= 0) && (n <= (n_rows(d))) } -> { d2:DataSet | (n_rows(d2) == n) }

-- Operations that depend on both the number of rows and columns
-- When training a model, we should have at least 10 rows per column
train :: liquid :: { d:DataSet | (n_rows(d) >= 10 * (n_cols(d))) } -> { m:Model | true }

create_empty_dataset :: liquid :: { n:Int | (n >= 0) } -> { d:DataSet | (n_cols(d) == n) && (n_rows(d) == 0)}

-- Scenario 1: Operations with only rows

let empty_dataset := create_empty_dataset(10) in {
    let dataset := add_rows(empty_dataset, 50) in {
        let row := get_row(dataset, 17) in {
            row
        }

        -- This fails because we do not have enough rows
        let row := get_row(dataset, 100) in {
            row
        }

        -- This fails because we do not have enough rows
        let s := sample(dataset, 100) in {
            s
        }

        let s := sample(dataset, 10) in {
            s
        }
    }
}

-- Scenario 2: Operations with only columns

let empty_dataset := create_empty_dataset(10) in {
    let dataset := add_cols(empty_dataset, 50) in {
        let c := extract_col(dataset, 7) in {
            c
        }

        let c := extract_col(dataset, 10) in {
            c
        }

        let c := reduce_cols(dataset, 5) in {
            c
        }

        let c := reduce_cols(dataset, 100) in {
            c
        }
    }
}

-- Scenario 3: Operations with rows and columns
-- We show that calling train on this data set fails because we do not have enough rows

let empty_dataset := create_empty_dataset(10) in {
    let dataset := add_rows(empty_dataset, 50) in {
       train(dataset)

       let single_column := extract_col(dataset, 5) in {
           train(single_column)
       }

       let small_dataset := reduce_cols(dataset, 5) in {
           train(small_dataset)
       }
    }
}

